'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.analyseResults = analyseResults;

var _math = require('./utils/math');

var _object = require('./utils/object');

var MIN_SCORE = 0.1;

// Takes an array of results and a function to return match details
// and returns an array of teams with calculated performance stats
function analyseResults(results, getMatchDetails) {
  if (!results || results instanceof Array === false) {
    throw new Error('First parameter must be an array of results');
  }

  if (typeof getMatchDetails !== 'function') {
    throw new Error('Second parameter must be a function');
  }

  var teams = {};

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = results[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var result = _step.value;

      var _getMatchDetails = getMatchDetails(result),
          homeTeamName = _getMatchDetails.homeTeamName,
          awayTeamName = _getMatchDetails.awayTeamName,
          homeGoals = _getMatchDetails.homeGoals,
          awayGoals = _getMatchDetails.awayGoals;

      var homeTeam = teams[homeTeamName] || newTeam();
      var awayTeam = teams[awayTeamName] || newTeam();

      homeTeam.played++;
      homeTeam.home.played++;
      homeTeam.goals.for += homeGoals;
      homeTeam.goals.against += awayGoals;
      homeTeam.home.goals.for += homeGoals;
      homeTeam.home.goals.against += awayGoals;

      awayTeam.played++;
      awayTeam.away.played++;
      awayTeam.goals.for += awayGoals;
      awayTeam.goals.against += homeGoals;
      awayTeam.away.goals.for += awayGoals;
      awayTeam.away.goals.against += homeGoals;

      if (homeGoals > awayGoals) {
        homeTeam.wins++;
        homeTeam.home.wins++;
        homeTeam.form.push('W');
        homeTeam.home.form.push('W');
        awayTeam.losses++;
        awayTeam.away.losses++;
        awayTeam.form.push('L');
        awayTeam.away.form.push('L');
      }

      if (homeGoals === awayGoals) {
        homeTeam.draws++;
        homeTeam.home.draws++;
        homeTeam.form.push('D');
        homeTeam.home.form.push('D');
        awayTeam.draws++;
        awayTeam.away.draws++;
        awayTeam.form.push('D');
        awayTeam.away.form.push('D');
      }

      if (homeGoals < awayGoals) {
        homeTeam.losses++;
        homeTeam.home.losses++;
        homeTeam.form.push('L');
        homeTeam.home.form.push('L');
        awayTeam.wins++;
        awayTeam.away.wins++;
        awayTeam.form.push('W');
        awayTeam.away.form.push('W');
      }

      teams[homeTeamName] = homeTeam;
      teams[awayTeamName] = awayTeam;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var averages = getAverages(results, getMatchDetails, teams);

  return Object.keys(teams).map(function (name) {
    return _extends({}, teams[name], {
      name: name,
      stats: getTeamStats(teams[name], averages)
    });
  });
}

function newTeam() {
  return {
    played: 0,
    wins: 0,
    draws: 0,
    losses: 0,
    goals: { for: 0, against: 0 },
    form: [],
    home: { played: 0, wins: 0, draws: 0, losses: 0, goals: { for: 0, against: 0 }, form: [] },
    away: { played: 0, wins: 0, draws: 0, losses: 0, goals: { for: 0, against: 0 }, form: [] }
  };
}

function getAverages(results, getMatchDetails, teams) {
  // Arrays of goal counts to be averaged out
  var averages = {
    for: [],
    against: [],
    home: { for: [], against: [] },
    away: { for: [], against: [] },
    expectedGoals: { home: [], away: [] } // Same for all teams
  };

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = results[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var match = _step2.value;

      var _getMatchDetails2 = getMatchDetails(match),
          homeGoals = _getMatchDetails2.homeGoals,
          awayGoals = _getMatchDetails2.awayGoals;

      averages.expectedGoals.home.push(homeGoals);
      averages.expectedGoals.away.push(awayGoals);
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = Object.keys(teams)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var key = _step3.value;

      var team = teams[key];
      averages.for.push(team.goals.for);
      averages.against.push(team.goals.against);
      averages.home.for.push(team.home.goals.for);
      averages.home.against.push(team.home.goals.against);
      averages.away.for.push(team.away.goals.for);
      averages.away.against.push(team.away.goals.against);
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3.return) {
        _iterator3.return();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  return (0, _object.iterate)(averages, _math.average);
}

// as: Attacking strength
// dw: Defense weakness
function getTeamStats(team, averages) {
  return {
    as: getScore(team.goals.for / averages.for),
    dw: getScore(team.goals.against / averages.against),
    home: {
      as: getScore(team.home.goals.for / averages.home.for),
      dw: getScore(team.home.goals.against / averages.home.against)
    },
    away: {
      as: getScore(team.away.goals.for / averages.away.for),
      dw: getScore(team.away.goals.against / averages.away.against)
    },
    expectedGoals: averages.expectedGoals // Same for all teams
  };
}

function getScore(score) {
  return Math.max(score, MIN_SCORE);
}