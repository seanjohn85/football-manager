'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateProbabilities = calculateProbabilities;

var _math = require('./utils/math');

var MAX_GOALS = 10; // Number of goals to scorecast

// Takes two teams from the result of analyseResults
// and calculates probability of different match outcomes
// using a basic poisson formula
// https://plus.maths.org/content/understanding-uncertainty-football-crazy
function calculateProbabilities(homeTeam, awayTeam) {
  // Expected number of goals for teams when home and away
  var homeExpectedGoals = homeTeam.stats.expectedGoals.home;
  var awayExpectedGoals = awayTeam.stats.expectedGoals.away;

  // Calculate performance multipliers based on team scores
  var homeMultiplier = homeTeam.stats.as * awayTeam.stats.dw;
  var awayMultiplier = awayTeam.stats.as * homeTeam.stats.dw;

  // Apply multipliers
  homeExpectedGoals *= homeMultiplier;
  awayExpectedGoals *= awayMultiplier;

  // Predict an outcome based on expected goals scored
  return scorecast(homeExpectedGoals, awayExpectedGoals);
}

function scorecast(homeExpectedGoals, awayExpectedGoals) {
  var result = { home: 0, away: 0, draw: 0 };
  var scores = [];
  var under = {
    '0.5': 0,
    '1.5': 0,
    '2.5': 0,
    '3.5': 0,
    '4.5': 0
  };
  var over = {
    '0.5': 0,
    '1.5': 0,
    '2.5': 0,
    '3.5': 0,
    '4.5': 0
  };
  var btts = { yes: 0, no: 0 };

  for (var h = 0; h <= MAX_GOALS; h++) {
    scores[h] = [];
    for (var a = 0; a <= MAX_GOALS; a++) {
      var probability = (0, _math.poisson)(h, homeExpectedGoals) * (0, _math.poisson)(a, awayExpectedGoals);

      // Home/away win
      if (h > a) result.home += probability;
      if (h === a) result.draw += probability;
      if (h < a) result.away += probability;

      // Scores
      scores[h][a] = probability;

      // BTTS
      if (h === 0 || a === 0) {
        btts.no += probability;
      } else {
        btts.yes += probability;
      }

      // Under/over
      for (var i = 0.5; i < 5; i++) {
        if (h + a < i) under[i] += probability;
        if (h + a > i) over[i] += probability;
      }
    }
  }

  return {
    result: result,
    scores: scores,
    under: under,
    over: over,
    btts: btts
  };
}